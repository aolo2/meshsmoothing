========= 08.03.20. Baseline (-O2) ============
[INFO] Loaded OBJ file: res/cubic_torus.obj
[INFO] Finished Catmull-Clark [1]
[TIME] 192 vertices, 11.734375 usec/v
[INFO] Finished Catmull-Clark [2]
[TIME] 768 vertices, 20.326822 usec/v
[INFO] Finished Catmull-Clark [3]
[TIME] 3072 vertices, 40.531250 usec/v
[INFO] Finished Catmull-Clark [4]
[TIME] 12288 vertices, 144.376785 usec/v
[INFO] Finished Catmull-Clark [5]
[TIME] 49152 vertices, 567.845032 usec/v

traces/cubic_torus_5.tracy
===============================================


========= 09.03.20. Indexed vertices (-O2) ====
[INFO] Loaded OBJ file: res/cubic_torus.obj
[INFO] Finished Catmull-Clark [1]
[TIME] 192 vertices, 1.937500 usec/v
[INFO] Finished Catmull-Clark [2]
[TIME] 768 vertices, 1.773438 usec/v
[INFO] Finished Catmull-Clark [3]
[TIME] 3072 vertices, 4.409180 usec/v
[INFO] Finished Catmull-Clark [4]
[TIME] 12288 vertices, 15.554606 usec/v
[INFO] Finished Catmull-Clark [5]
[TIME] 49152 vertices, 59.815552 usec/v

traces/INDEXED_cubic_torus_5.tracy
===============================================


========= 09.03.20. Separate chaining table (-O2)
[INFO] Loaded OBJ file: res/cubic_torus.obj
[INFO] Finished Catmull-Clark [1]
[TIME] 192 vertices, 0.531250 usec/v
[INFO] Finished Catmull-Clark [2]
[TIME] 768 vertices, 0.416667 usec/v
[INFO] Finished Catmull-Clark [3]
[TIME] 3072 vertices, 0.359049 usec/v
[INFO] Finished Catmull-Clark [4]
[TIME] 12288 vertices, 0.159180 usec/v
[INFO] Finished Catmull-Clark [5]
[TIME] 49152 vertices, 0.144491 usec/v

[INFO] Finished Catmull-Clark [6]
[TIME] 196608 vertices, 0.173579 usec/v
[INFO] Finished Catmull-Clark [7]
[TIME] 786432 vertices, 0.208380 usec/v
[INFO] Finished Catmull-Clark [8]
[TIME] 3145728 vertices, 0.219517 usec/v

traces/HASHSC_cubic_torus_5.tracy
===============================================


========= 10.03.20. Locality sensitive hashing (-O2)
[INFO] Loaded OBJ file: res/cubic_torus.obj
[INFO] Finished Catmull-Clark [1]
[TIME] 192 vertices, 0.947917 usec/v
[INFO] Finished Catmull-Clark [2]
[TIME] 768 vertices, 0.742188 usec/v
[INFO] Finished Catmull-Clark [3]
[TIME] 3072 vertices, 0.593099 usec/v
[INFO] Finished Catmull-Clark [4]
[TIME] 12288 vertices, 0.245443 usec/v
[INFO] Finished Catmull-Clark [5]
[TIME] 49152 vertices, 0.233439 usec/v

traces/LSH_cubic_torus_5.tracy
===============================================


========= 18.03.20. Explicit ajdacency info (-O2)
[INFO] Loaded OBJ file: res/cubic_torus.obj
[INFO] Finished Catmull-Clark [1]
[TIME] 192 vertices, 0.463542 usec/v
[INFO] Finished Catmull-Clark [2]
[TIME] 768 vertices, 0.346354 usec/v
[INFO] Finished Catmull-Clark [3]
[TIME] 3072 vertices, 0.299479 usec/v
[INFO] Finished Catmull-Clark [4]
[TIME] 12288 vertices, 0.250651 usec/v
[INFO] Finished Catmull-Clark [5]
[TIME] 49152 vertices, 0.118510 usec/v

[INFO] Finished Catmull-Clark [6]
[TIME] 196608 vertices, 0.133586 usec/v
[INFO] Finished Catmull-Clark [7]
[TIME] 786432 vertices, 0.139140 usec/v
[INFO] Finished Catmull-Clark [8]
[TIME] 3145728 vertices, 0.144132 usec/v

traces/EXPLICIT_cubic_torus_5.tracy
===============================================


[[[[======= 14.04.20 Working on edge points ====]]]]]


simplify edge points table somehow... (found many DC misses via uProf)
remove ms_vecs everywhere (found many samples)


========= 15.04.20. Edge sort (-O2)
[INFO] Loaded OBJ file: res/cubic_torus.obj
[INFO] Finished Catmull-Clark [1]
[TIME] 192 vertices, 0.120000 msec, 0.625000 usec/v
[INFO] Finished Catmull-Clark [2]
[TIME] 768 vertices, 0.323000 msec, 0.420573 usec/v
[INFO] Finished Catmull-Clark [3]
[TIME] 3072 vertices, 1.210000 msec, 0.393880 usec/v
[INFO] Finished Catmull-Clark [4]
[TIME] 12288 vertices, 4.896000 msec, 0.398438 usec/v
[INFO] Finished Catmull-Clark [5]
[TIME] 49152 vertices, 13.337000 msec, 0.271342 usec/v
[INFO] Finished Catmull-Clark [6]
[TIME] 196608 vertices, 36.897999 msec, 0.187673 usec/v
[INFO] Finished Catmull-Clark [7]
[TIME] 786432 vertices, 168.087997 msec, 0.213735 usec/v
[INFO] Finished Catmull-Clark [8]
[TIME] 3145728 vertices, 755.658020 msec, 0.240217 usec/v
===============================================

========== 15.04.20 Edges binned by start (try to remove cache misses caused by vectors) ====
[INFO] Loaded OBJ file: res/cubic_torus.obj
[INFO] Finished Catmull-Clark [1]
[TIME] 192 vertices, 0.084000 msec, 0.437500 usec/v
[INFO] Finished Catmull-Clark [2]
[TIME] 768 vertices, 0.215000 msec, 0.279948 usec/v
[INFO] Finished Catmull-Clark [3]
[TIME] 3072 vertices, 0.685000 msec, 0.222982 usec/v
[INFO] Finished Catmull-Clark [4]
[TIME] 12288 vertices, 2.840000 msec, 0.231120 usec/v
[INFO] Finished Catmull-Clark [5]
[TIME] 49152 vertices, 8.861000 msec, 0.180278 usec/v
[INFO] Finished Catmull-Clark [6]
[TIME] 196608 vertices, 22.534000 msec, 0.114614 usec/v
[INFO] Finished Catmull-Clark [7]
[TIME] 786432 vertices, 95.678001 msec, 0.121661 usec/v
[INFO] Finished Catmull-Clark [8]
[TIME] 3145728 vertices, 410.333008 msec, 0.130441 usec/v


uprof params: res/cube_hole.obj_8.obj 3
IBS DC miss 6700 (old) -> 5000 (new)
===============================================

forgot to add early-out on edge points table construction >.<

===
[INFO] Loaded OBJ file: res/cubic_torus.obj
[INFO] Finished Catmull-Clark [1]
[TIME] 192 vertices, 0.066000 msec, 0.343750 usec/v
[INFO] Finished Catmull-Clark [2]
[TIME] 768 vertices, 0.160000 msec, 0.208333 usec/v
[INFO] Finished Catmull-Clark [3]
[TIME] 3072 vertices, 0.539000 msec, 0.175456 usec/v
[INFO] Finished Catmull-Clark [4]
[TIME] 12288 vertices, 2.104000 msec, 0.171224 usec/v
[INFO] Finished Catmull-Clark [5]
[TIME] 49152 vertices, 5.228000 msec, 0.106364 usec/v
[INFO] Finished Catmull-Clark [6]
[TIME] 196608 vertices, 19.131001 msec, 0.097305 usec/v
[INFO] Finished Catmull-Clark [7]
[TIME] 786432 vertices, 83.037003 msec, 0.105587 usec/v
[INFO] Finished Catmull-Clark [8]
[TIME] 3145728 vertices, 394.186005 msec, 0.125308 usec/v
===

now lets try to fix the csr construction (get rid of vectors)

=== (try to remove move cache misses caused by vectors)
[INFO] Loaded OBJ file: res/cubic_torus.obj
[INFO] Finished Catmull-Clark [1]
[TIME] 192 vertices, 0.056000 msec, 0.291667 usec/v
[INFO] Finished Catmull-Clark [2]
[TIME] 768 vertices, 0.157000 msec, 0.204427 usec/v
[INFO] Finished Catmull-Clark [3]
[TIME] 3072 vertices, 0.379000 msec, 0.123372 usec/v
[INFO] Finished Catmull-Clark [4]
[TIME] 12288 vertices, 1.442000 msec, 0.117350 usec/v
[INFO] Finished Catmull-Clark [5]
[TIME] 49152 vertices, 6.363000 msec, 0.129456 usec/v
[INFO] Finished Catmull-Clark [6]
[TIME] 196608 vertices, 15.557000 msec, 0.079127 usec/v
[INFO] Finished Catmull-Clark [7]
[TIME] 786432 vertices, 65.281998 msec, 0.083010 usec/v
[INFO] Finished Catmull-Clark [8]
[TIME] 3145728 vertices, 319.458008 msec, 0.101553 usec/v

uprof params: res/cube_hole.obj_8.obj 3
IBS DC miss 5000 (old) -> 2615 (new)
===


===
do not returns ms_vec's from vert_adjacent_xxx

[INFO] Loading OBJ file: res/cubic_torus.obj...
[INFO] Loaded OBJ file: res/cubic_torus.obj.
[INFO] Finished Catmull-Clark [1]
[TIME] 192 vertices, 0.064000 msec, 0.333333 usec/v
[INFO] Finished Catmull-Clark [2]
[TIME] 768 vertices, 0.147000 msec, 0.191406 usec/v
[INFO] Finished Catmull-Clark [3]
[TIME] 3072 vertices, 0.417000 msec, 0.135742 usec/v
[INFO] Finished Catmull-Clark [4]
[TIME] 12288 vertices, 1.584000 msec, 0.128906 usec/v
[INFO] Finished Catmull-Clark [5]
[TIME] 49152 vertices, 6.458000 msec, 0.131388 usec/v
[INFO] Finished Catmull-Clark [6]
[TIME] 196608 vertices, 12.155000 msec, 0.061824 usec/v
[INFO] Finished Catmull-Clark [7]
[TIME] 786432 vertices, 64.042000 msec, 0.081434 usec/v
[INFO] Finished Catmull-Clark [8]
[TIME] 3145728 vertices, 309.907013 msec, 0.098517 usec/v
===



----- switch to cycles per vertex (with rdtsc) -----
005dd548e79fa86ce68c570116cd995f19ab7fe4 (old CSR)
[INFO] Finished Catmull-Clark [8]
[TIME] 3145728 vertices, 2307695456 cycles, 733.596619 cycles/v

a937297c2b58f227038df21c1621d6b9676f5d94 (edge binning)
[INFO] Finished Catmull-Clark [8]
[TIME] 3145728 vertices, 1267254528 cycles, 402.849365 cycles/v

5f3f66e0bdb0ba7d16d7d2e777923e7a5e5f0c75 (ms_vecs + cleanup)
[INFO] Finished Catmull-Clark [8]
[TIME] 3145728 vertices, 1023658720 cycles, 325.412354 cycles/v
-----


-- tigth packing of adjacency CSR --
./build/profile/ms res/cubic_torus.obj_7.obj 1
with:
	- init acceleration struct = 112ms
	- edge points = 153ms
	- update old points = 40ms
~305 cycles/v
without:
	- init acceleration struct = 107ms
	- edge points = 167ms
	- update old points = 42s
~315 cycles/v
----


--- use adjacency info for faster edge points
[INFO] Loading OBJ file: res/cubic_torus.obj...
[INFO] Loaded OBJ file: res/cubic_torus.obj.
[INFO] Finished Catmull-Clark [1]
[TIME] 192 vertices, 227616 cycles, 1185.500000 cycles/v
[INFO] Finished Catmull-Clark [2]
[TIME] 768 vertices, 601984 cycles, 783.833313 cycles/v
[INFO] Finished Catmull-Clark [3]
[TIME] 3072 vertices, 1711520 cycles, 557.135437 cycles/v
[INFO] Finished Catmull-Clark [4]
[TIME] 12288 vertices, 6318240 cycles, 514.179688 cycles/v
[INFO] Finished Catmull-Clark [5]
[TIME] 49152 vertices, 26809440 cycles, 545.439453 cycles/v
[INFO] Finished Catmull-Clark [6]
[TIME] 196608 vertices, 64780672 cycles, 329.491547 cycles/v
[INFO] Finished Catmull-Clark [7]
[TIME] 786432 vertices, 223465344 cycles, 284.150879 cycles/v
[INFO] Finished Catmull-Clark [8]
[TIME] 3145728 vertices, 855525184 cycles, 271.964142 cycles/v
---

-- save face info per edge and use it instead of edge_adjacent_face ---
[INFO] Loading OBJ file: res/cubic_torus.obj...
[INFO] Loaded OBJ file: res/cubic_torus.obj.
[INFO] Finished Catmull-Clark [1]
[TIME] 192 vertices, 246848 cycles, 1285.666626 cycles/v
[INFO] Finished Catmull-Clark [2]
[TIME] 768 vertices, 587776 cycles, 765.333313 cycles/v
[INFO] Finished Catmull-Clark [3]
[TIME] 3072 vertices, 1789152 cycles, 582.406250 cycles/v
[INFO] Finished Catmull-Clark [4]
[TIME] 12288 vertices, 6698912 cycles, 545.158875 cycles/v
[INFO] Finished Catmull-Clark [5]
[TIME] 49152 vertices, 29922496 cycles, 608.774719 cycles/v
[INFO] Finished Catmull-Clark [6]
[TIME] 196608 vertices, 48483808 cycles, 246.601395 cycles/v
[INFO] Finished Catmull-Clark [7]
[TIME] 786432 vertices, 193588800 cycles, 246.160889 cycles/v
[INFO] Finished Catmull-Clark [8]
[TIME] 3145728 vertices, 805827360 cycles, 256.165619 cycles/v
---

curiously, 20cycles/vertex speedup for replacing in edge points, but gets worse
when replacing hole point updates


debug mode uProf run revealed that
if (accel.verts_matrix_repeats[e3] == end && adj_face != face) has BR misp = 70.46%

!!! wow this works !!!
rearranged the if and got down to
screenshots of uProf in VK
[INFO] Finished Catmull-Clark [8]
[TIME] 3145728 vertices, 779098816 cycles, 247.668839 cycles/v
~~


~~~ added omp parallel for (no args) to face points and update points
cubic_torus.obj 8
with:
	- face points = 3.7ms
	- update points = 15ms
without:
	- face points = 5ms
	- update points = 29ms


[INFO] Loading OBJ file: res/cubic_torus.obj...
[INFO] Loaded OBJ file: res/cubic_torus.obj.
[INFO] Finished Catmull-Clark [1]
[TIME] 192 vertices, 2011136 cycles, 10474.666992 cycles/v
[INFO] Finished Catmull-Clark [2]
[TIME] 768 vertices, 516288 cycles, 672.250000 cycles/v
[INFO] Finished Catmull-Clark [3]
[TIME] 3072 vertices, 1513440 cycles, 492.656250 cycles/v
[INFO] Finished Catmull-Clark [4]
[TIME] 12288 vertices, 5818208 cycles, 473.486969 cycles/v
[INFO] Finished Catmull-Clark [5]
[TIME] 49152 vertices, 23412448 cycles, 476.327484 cycles/v
[INFO] Finished Catmull-Clark [6]
[TIME] 196608 vertices, 48748064 cycles, 247.945480 cycles/v
[INFO] Finished Catmull-Clark [7]
[TIME] 786432 vertices, 185788352 cycles, 236.242111 cycles/v
[INFO] Finished Catmull-Clark [8]
[TIME] 3145728 vertices, 726217952 cycles, 230.858475 cycles/v
~~~

-- am puzzled. poking around different profilers to get a lead ---
vtune shows poor CPU utilization, about 35% of cycles are 0issue: waitiing for cache
tracy shows that malloc takes no time (surprise insight)

tracy: seems that init_acceleration_structure is N^2. it's 55% on lesser meshes, about 75% on a bigger one


reuse edges_from in init_acceleration_structire:
res/cube_noface.obj_8.obj_2.obj 1
without:
	[TIME] 20971520 vertices, 7178827036 cycles, 342.313171 cycles/v
	init_a_s: 1.58s
	count all edges: 221ms
	alloc and count: 1.29s
	pack: 64ms

with:
	[TIME] 20971520 vertices, 6432544059 cycles, 306.727600 cycles/v
	init_a_s: 1.3s
	count all edges: 111ms
	alloc and count: 1.12s
	pack: 66ms
---

---
time distribution:
	cubic_torus.obj_7.obj _ 25
		init as: 51%
		edge points: 29%
		update old: 6%
		do subdiv: 5%
		copy unique: 4%
		face points: 1%

	cubic_torus.obj_4.obj _ 25
		similar

	cubic_torus.obj_7.obj 3
		similar
---

--- great simplification! remove edges_repeats and faces_repeats. edge_indices are computed and packed with 2 edge indices mapping to one unique edge (indices are the same if edge is unique and different if they arent)

[INFO] Loading OBJ file: res/cubic_torus.obj...
[INFO] Loaded OBJ file: res/cubic_torus.obj.
[INFO] Finished Catmull-Clark [1]
[TIME] 192 vertices, 1503360 cycles, 7830.000000 cycles/v
[INFO] Finished Catmull-Clark [2]
[TIME] 768 vertices, 4625536 cycles, 6022.833496 cycles/v
[INFO] Finished Catmull-Clark [3]
[TIME] 3072 vertices, 1607264 cycles, 523.197937 cycles/v
[INFO] Finished Catmull-Clark [4]
[TIME] 12288 vertices, 5530432 cycles, 450.067719 cycles/v
[INFO] Finished Catmull-Clark [5]
[TIME] 49152 vertices, 29762144 cycles, 605.512390 cycles/v
[INFO] Finished Catmull-Clark [6]
[TIME] 196608 vertices, 54482336 cycles, 277.111481 cycles/v
[INFO] Finished Catmull-Clark [7]
[TIME] 786432 vertices, 156802144 cycles, 199.384232 cycles/v
[INFO] Finished Catmull-Clark [8]
[TIME] 3145728 vertices, 621576576 cycles, 197.593872 cycles/v
---

--- added SPMD multithreading to init_accel_structure:count
./build/release/ms res/cubic_torus.obj_7.obj _ 100
[INFO] Loading OBJ file: res/cubic_torus.obj_7.obj...
[INFO] Loaded OBJ file: res/cubic_torus.obj_7.obj.
[TIME] Runs: 100 Average: 144.9 cycles/v, Stdeviation: 7.597056

init_acceleration_struct
1T: mean 113 | median 114 | sigma 3.7
6T: mean 66  | median 62  | sigma 7.3
---


--- edge points parallelization with atomic capture on old = ++nedge_pointsv is slooooow
./build/profile/ms res/cubic_torus.obj_7.obj _ 25
[INFO] Loading OBJ file: res/cubic_torus.obj_7.obj...
[INFO] Loaded OBJ file: res/cubic_torus.obj_7.obj.
[TIME] Runs: 25 Average: 304.5 cycles/v, Stdeviation: 7.993815
---

--- edge points with precomputed offsets, all writing to the same array (TODO: false sharing?)
./build/release/ms res/cubic_torus.obj_7.obj _ 25
[INFO] Loading OBJ file: res/cubic_torus.obj_7.obj...
[INFO] Loaded OBJ file: res/cubic_torus.obj_7.obj.
[TIME] Runs: 25 Average: 121.9 cycles/v, Stdeviation: 6.409539
---

'edge_points' and 'count' zones have very bad work distribution, can save like 20% if work is even

--- edge_points: tried to bin work by edge count, failed ---
see branch bin-edge-points
---



--- strange artifacts ---
screen in vk: count edge poinst starts before face points ended = bad? seems so
----

--- overlapped edge_points with update_old: win
--- overlapped face points with init_acceleration_struct: this gives negative results :(

--- reverted face points masking...

--- ok, time to address the poor scaling.
1T:
                  (mean, med,  dev)
- count all edges (20.5, 19.9, 2.9)
- count           (86.7, 86.5, 1.4)
- face points     (6.8,  6.7,  0.3)
- edge_points     (61.2, 61.2, 0.7)
- update old      (35.2, 35.1, 0.8)
- do subdiv       (13.5, 13.5, 0.2)

6T:
                  (mean, med,  dev)
- count all edges (7.8,  7.6,  1.1)
- count           (31.7, 30.0, 5.9)
- face points     (3.3,  3.2,  0.5)
- edge_points     (25.1, 27.3, 8.5)
- update old      (12.9, 11.0, 8.4)
- do subdiv       (10.4, 10.4, 0.3)


do subdiv is an obvious anomaly, fully independent but just 30% win over 1T??
- extracted subdivision step into "ds_bench.c"
- still very bad speedup
- /* face 3 */
  new_mesh.faces[face_base + 12] = d;
  new_mesh.faces[face_base + 13] = edge_point_da;
  new_mesh.faces[face_base + 14] = facep_index;
  new_mesh.faces[face_base + 15] = edge_point_cd;
  these 4 instructions take up >60% of total cycles

  single thread is not nearly as bad (~40%)

- about 80% of DC misses in those 4 instructions, why?
- dc miss rates and ratios are same for all 16 stores, but the DC MISS ops are all in the last four
store forwarding?

- splitting the loop into two: face points and new faces helps a bit
- using memcpy instead of the first loop helps a lot!
- immediate offsets (face_base + xx) vs face_base++ generate different asm, but perform the same

- 4 faces of 4 ints total to one cache line. maybe alignments of new_mesh.faces?
- nope

- PRETTY SURE WE ARE LIMITED BY STORES (cache is ok (likwid), and reducing store count gives 3x speedup)
-



- peers said to stop, but... inspecting assembly for AVG DC miss latency:

edge_point.x = (face_point_me.x + face_point_adj.x + startv.x + endv.x) * 0.25f;
goes straight to RAM (avg 400 cycles)

struct ms_v3 endv = mesh.vertices[end];
is bad too

avg_face_point.x += fp.x;
all miss too

init_accel_struct:
if (edges[e] == end) {
25 cycles: L3?

if (faces[f] == face) {
about the same (37 cycles)

second if (edges[e] == end) {
even worse: 145 cycles

if (faces[f] == face) {
too



edge_indices[(edge_base + edge_count) * 2 + 0] = edge_index;
is SLOOOOW: 1400(!) avg lat

second edge_indices[(edge_base + edge_count) * 2 + 0] = edge_index;
is even slower (!)


if (this_tid_process_from <= end && end < this_tid_process_to) {
is 33% mispredict taken


for (int i = 0; i < adj_faces_count; ++i) {
bad too: 60% mp taken


--- IDEA: mb fast path for 4 adjacent edjes and 4 adjacent faces?
fail


--- parallel "reduce offsets" and "copy unique points" - small wins
--- parallel "propogate offsets" and 2 sections in "tight pack" - small wins too



--- try to use more data from cache lines in IAS: small win (~215->208 c/v for cubic_torus_7 _ 25)
--- unroll by four: small win (208->200 --//--)



--- tried same cache reuse in MT, bad results, but accidentally 1T-ed "tight packing"


--- see branch 'early-compute' for some interesting stuff
--- adapted two-at-a-time edge adds, small win (205->197)



--- DUUUH!!! 
if (edge_points[edge_index_1] != -1) {
	continue;
}

!! 183.4 cycles/v !!




--- 12.09.2020
Used new stack sampling with tracy (cubic_torus_7 _ 25)
Hotspots at:

1.
struct ms_v3 vertex = mesh.vertices[mesh.faces[face * mesh.degree + vert]];
fp.x += vertex.x;
fp.y += vertex.y;
fp.z += vertex.z;

2.
if (edge_points[edge_index_1] != -1) {
    continue;
}

3.
edge_point.x = (face_point_me.x + face_point_adj.x + startv.x + endv.x) * 0.25f;
edge_point.y = (face_point_me.y + face_point_adj.y + startv.y + endv.y) * 0.25f;
edge_point.z = (face_point_me.z + face_point_adj.z + startv.z + endv.z) * 0.25f;

4. ??? FOR some reason
edge_pointsv[nedge_pointsv] = edge_point; 

5.
struct ms_v3 fp = face_points[accel.faces_matrix[adj_faces_base + i]];
avg_face_point.x += fp.x;
avg_face_point.y += fp.y;
avg_face_point.z += fp.z;

6.
struct ms_v3 endv = mesh.vertices[end];
                
avg_mid_edge_point.x += (vertex.x + endv.x) * 0.5f;
avg_mid_edge_point.y += (vertex.y + endv.y) * 0.5f;
avg_mid_edge_point.z += (vertex.z + endv.z) * 0.5f;

7. ???
new_mesh.faces[face_base + 5] = edge_point_bc;



1, 2, 3, 5, 6 - confirmed by AMD uProf to miss DC a lot. Latency ~250 cycles confirms we are going to RAM!

4 - AMD uProf confirms that no DC misses, but hotspot. Probably nedge_pointsv++ creates a data dependency between loop iterations

7. misses a lot, but mb write bandwidth bound?

ALSO THIS MISSES A LOT! But data is not used for a long time. Latency -> Throughput
edge_points[edge_index_1] = nedge_pointsv;
edge_points[edge_index_2] = nedge_pointsv;


IDEA: pay for all cache misses once, create a (probably HUGE) linear structure




----
obj wavefront kinda~~~ guarantiess counter-clockwise
this means we can one-pass collect all edges (no duplicated)

add all start < end
then add all start > end each start will be found in accel[end], because it has already been added

faces_offsets is the same as edges_offsets
face has each vertex once, means we can add face to accel[v]

FIRST TRY [TIME] avg: 170.8 cycles/v | sigma: 3.41
WEEE!!!!!!


Returned indirect indexing so that ms_edge is not that huge (saw many cycles in spent in copies)
...
[TIME] avg: 135.5 cycles/v | sigma: 2.09
!!!!!!!




----
remove nedge_pointsv (gives nothing but a smile)
----


----
count = n unique edges

// mesh
vertices: nverts * 3 * 4
faces:    nfaces * 4 * 4

// accel
edges:        count * 6 * 4
offsets:      nverts * 4
verts_starts: nverts * 4
faces_matrix: count * 2 * 4
verts_starts: count * 2 * 4







== count edges (mesh.nfaces repeats)
4 int reads (from mesh.faces)
4-8 int writes (to offsets/offsets_both)

== propogate offsets
mesh.nverts int reads (from offsets)
mesh.nverts int reads (from offsets_both)
mesh.nverts int writes (to offsets)
mesh.nverts int write (to offsets_both)

== edges first pass (mesh.nfaces)
4 int reads (from mesh.faces)

0-4 int read (from offsets)
0-4 int read + 0-4 int write (from to edges_accum)
0-4 ms_edge writes (to edges)

4 int reads (from offsets_both) (misses?)
4 int reads (from edges_accum_simple) (misses?)
4 int read + 4 int write (from to edges_accum_simple) (all miss prob)


== edges second pass (mesh.nfaces)
4 int reads (from mesh.faces)

4x
  1 int read from edges_accum
  1 int reads from offsets
  2 int writes to edges



== face points (nverts repeats):
reads 4 ints from mesh.faces
read 4 ms_v3 from mesh.vertices (4 cache misses)
write 1 ms_v3 to face_points

== edge points (count repeats):
read 1 ms_edge from accel.edges
read 2 ms_v3 from mesh.vertcies (cache miss on edge.end)
read 2 ms_v3 from face_points
write 1 ms_v3 to edge_pointsv
write 2 ints to edge_points (2 cache misses)

== update points (nverts repeats):
read 1 ms_v3 (from mesh.vertices)
read 2 ints (from accel.verts_starts)

read a few (3-6) ints (from accel.faces_matrix)
read the same few (3-6) ms_v3 (from face_points)
read 1 int (from accel.verts_matrix)
read 1 ms_v3 (from mesh.vertices)

write 1 ms_v3 (to new_verts)

== copy unique
memcpy(new_mesh.vertices, new_verts, mesh.nverts * sizeof(struct ms_v3));
memcpy(new_mesh.vertices + mesh.nverts, edge_pointsv, accel.count * sizeof(struct ms_v3));
memcpy(new_mesh.vertices + mesh.nverts + accel.count, face_points, mesh.nfaces * sizeof(struct ms_v3));

== do subdivision (mesh.nfaces repeats)
read 4 ints from mesh.faces (from mesh.faces)
read 4 int from edge_points (from edge_points)

write 16 ints (to new_mesh.faces)

>>> 768432 * (4 * 4 + 6 * 4) + 1310688 * (4 + 4 + 4 + 4) + 786432 * (4 * 4 + 2 * 4 + 2 * 4 + 2 * 4 + 2 * 6 * 4 + 4 * 4 + 4 * 4 + 8 * 4) + 768432 * (4 * 4 + 4 * 4 + 4 * 4 + 4 * 4 * 2)
232720512
>>> 1310688 * (4 * 4 + 4 * 4 * 3 + 4 * 3) + 2 * 1310688 * (1 * 6 * 4 + 2 * 4 * 3 + 2 * 4 + 3 + 1 * 4 * 3 + 2 * 4) + 1310688 * (4 * 3 + 2 * 4 + 4 * 4 + 4 * 4 * 3 + 4 + 4 * 3 + 4 * 3) + 1310688 * 4 * 3 + 1310688 * 2 * 4 * 3 + 768432 * 4 * 3 + 768432 * (4 * 4 + 4 * 4 + 16 * 4)
583673472
>>> 232720512 + 583673472
816393984
>>> 816393984 / 1024
797259.75
>>> 816393984 / 1024 / 1024
778.573974609375
>>> 816393984 / 1024 / 1024 / 1024 / 4
0.19008153676986694
>>> 778 / 10000
0.0778
>>> 778 / 20000
0.0389
>>> 778 / 20
38.9
>>> 778 / 10
77.8l

----



